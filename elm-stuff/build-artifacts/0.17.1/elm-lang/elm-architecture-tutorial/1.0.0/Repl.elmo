var _elm_lang$elm_architecture_tutorial$Repl$t_s_o_l = {ctor: '_Tuple0'};
var _elm_lang$elm_architecture_tutorial$Repl$sumRange = F3(
	function (start, end, acc) {
		sumRange:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(start, end) > 0) {
				return acc;
			} else {
				var _v0 = start + 1,
					_v1 = end,
					_v2 = acc + start;
				start = _v0;
				end = _v1;
				acc = _v2;
				continue sumRange;
			}
		}
	});
var _elm_lang$elm_architecture_tutorial$Repl$multiply = F2(
	function (a, b) {
		return a * b;
	});
var _elm_lang$elm_architecture_tutorial$Repl$square = function (a) {
	return A2(_elm_lang$elm_architecture_tutorial$Repl$multiply, a, a);
};
var _elm_lang$elm_architecture_tutorial$Repl$productOfsquares = F2(
	function (a, b) {
		return A2(
			_elm_lang$elm_architecture_tutorial$Repl$multiply,
			_elm_lang$elm_architecture_tutorial$Repl$square(a),
			_elm_lang$elm_architecture_tutorial$Repl$square(b));
	});
var _elm_lang$elm_architecture_tutorial$Repl$just10 = function (n) {
	return 10;
};
var _elm_lang$elm_architecture_tutorial$Repl$incrementAll2 = _elm_lang$core$List$map(
	function (c) {
		return c + 1;
	});
var _elm_lang$elm_architecture_tutorial$Repl$incrementAll = function (list) {
	return A2(
		_elm_lang$core$List$map,
		function (n) {
			return n + 1;
		},
		list);
};
var _elm_lang$elm_architecture_tutorial$Repl$doubleAll = function (list) {
	return A2(
		_elm_lang$core$List$map,
		function (n) {
			return n * 2;
		},
		list);
};
var _elm_lang$elm_architecture_tutorial$Repl$d_e_l_t_r_o_n_3_0_3_0 = _elm_lang$elm_architecture_tutorial$Repl$multiply;
var _elm_lang$elm_architecture_tutorial$Repl$addOneToSum = F2(
	function (y, z) {
		var x = 1;
		return (x + y) + z;
	});
var _elm_lang$elm_architecture_tutorial$Repl$addOne = function (x) {
	return x + 1;
};
var _elm_lang$elm_architecture_tutorial$Repl$add = F2(
	function (x, y) {
		return x + y;
	});
